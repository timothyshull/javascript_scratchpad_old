{"version":3,"sources":["tp1.js"],"names":[],"mappings":";AACA,YAAY,CAAC;AACb,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IACpB,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC;IAC7B,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGnC,IAAI,EAAE,GAAG,QAAQ,CAAC,eAAe,CAAC;AAC9B,SAAK,EAAE,OAAO,CAAC,KAAK;AACpB,UAAM,EAAE,OAAO,CAAC,MAAM;CACzB,CAAC,CAAC;;AAEH,IAAI,WAAW,GAAG,SAAS,WAAW,CAAC,MAAM,EAAE;;AAE3C,QAAI,QAAQ,GAAG,EAAE,CAAC;;AAElB,WAAO,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM,EAAE;AACzC,YAAI,KAAK,GAAG,EAAE,CAAC;;AAEf,UAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,UAAS,MAAM,EAAE;AACjC,mBAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,MAAM,CAAC,CAAC;;AAE7D,gBAAI,MAAM,GAAG,CAAC,EAAE;AACZ,uBAAO,CAAC,MAAM,GAAG,QAAQ,GAAG,KAAK,CAAC,CAAC;aACtC,MAAM;AACH,sBAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;aACxC;;AAED,cAAE,CAAC,KAAK,EAAE,CAAC;SACd,CAAC,CAAC;KACN,CAAC,CAAC;CACN,CAAC;;;;;;;;;;;;;;AAcF,WAAW,CAAC,UAAU,CAAC,CAAC;AACxB,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACxC,WAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,GAAG,CAAC,CAAC;CAC1C,CAAC,CAAC","file":"tp1-compiled.js","sourcesContent":["/*jshint node: true, esnext: true*/\n'use strict';\nconst fs = require('fs'),\n    Promise = require('bluebird'),\n    readline = require('readline');\n\n\n//let tp = new Promise(function (resolve, reject) {\n//    /*jslint unparam: true*/\n//    reject(new Error('Rejected error'));\n//}).then(function (result) {\n//    console.log('Result 1 ' + result);\n//    return result;\n//}).then(function (result) {\n//    console.log('Result 2 ' + result);\n//    return result;\n//}).catch(function(e) {\n//    console.log('Catch handler ' + e);\n//    console.log('Another');\n//});\n\n\n//let tp = new Promise(function (resolve, reject) {\n//    /*jslint unparam: true*/\n//    //reject(new Error('Rejected error'));\n//\n//    //setTimeout(function () {\n//    //    resolve(1);\n//    //}, 5000);\n//\n//    let rl = readline.createInterface({\n//        input: process.stdin,\n//        output: process.stdout\n//    });\n//\n//    rl.question('What do you think of Node.js? ', function(answer) {\n//        console.log('Thank you for your valuable feedback:', answer);\n//\n//        if (answer > 5) {\n//            resolve(answer);\n//        } else {\n//            reject(new Error('Must be above 5'));\n//        }\n//\n//        rl.close();\n//    });\n//}).then(function (result) {\n//    console.log('Result 1 ' + result);\n//    return result;\n//}).then(function (result) {\n//    console.log('Result 2 ' + result);\n//    return result;\n//}).catch(function(e) {\n//    console.log('Catch handler ' + e);\n//    console.log('Another');\n//});\n//\n//tp.then(function (res) {\n//    console.log('Another result' + res);\n//    return res;\n//});\n//\n//tp.then(function (res) {\n//    console.log('can run again' + res);\n//    return res;\n//});\n\n//let promiseFactory = function promiseFactory() {\n//    return new Promise(function (resolve, reject) {\n//        /*jslint unparam: true*/\n//        //reject(new Error('Rejected error'));\n//\n//        //setTimeout(function () {\n//        //    resolve(1);\n//        //}, 5000);\n//\n//        let rl = readline.createInterface({\n//            input: process.stdin,\n//            output: process.stdout\n//        });\n//\n//        rl.question('What do you think of Node.js? ', function(answer) {\n//            let newVal = answer + 10;\n//            console.log('Thank you for your valuable feedback:', newVal);\n//\n//            if (newVal > 20) {\n//                resolve(newVal);\n//            } else {\n//                reject(new Error('Must be above 5'));\n//            }\n//\n//            rl.close();\n//        });\n//    });\n//};\n//\n//let tp = promiseFactory().then(function(val) {\n//    console.log(val);\n//});\n//\n//tp.then(function(val) {\n//    console.log('another run of tp ' + val);\n//});\n\nlet rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nlet doSomething = function doSomething(prompt) {\n\n    let modifier = 10;\n\n    return new Promise(function(resolve, reject) {\n        let value = 42;\n\n        rl.question(prompt, function(answer) {\n            console.log('Thank you for your valuable feedback:', answer);\n\n            if (answer > 5) {\n                resolve(answer + modifier + value);\n            } else {\n                reject(new Error('Must be above 5'));\n            }\n\n            rl.close();\n        });\n    });\n};\n\n//doSomething().then(function () {\n//    return doSomethingElse();\n//});\n//\n//doSomething().then(function () {\n//    doSomethingElse();\n//});\n//\n//doSomething().then(doSomethingElse());\n//\n//doSomething().then(doSomethingElse);\n\ndoSomething('prompt 1');\ndoSomething('prompt 2').then(function (val) {\n    console.log('returned val is: ' + val);\n});"]}